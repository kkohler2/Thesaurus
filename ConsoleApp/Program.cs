using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Net.Http;
using System.Threading.Tasks;

namespace Thesaurus
{
    // http://words.bighugelabs.com/api/2/<key>/<word>/json
    // Structure generated by http://json2csharp.com/
    public class Adjective
    {
        public List<string> syn { get; set; }
        public List<string> ant { get; set; }
        public List<string> rel { get; set; }
    }

    public class Noun
    {
        public List<string> syn { get; set; }
        public List<string> ant { get; set; }
        public List<string> rel { get; set; }
    }

    public class Verb
    {
        public List<string> syn { get; set; }
        public List<string> ant { get; set; }
        public List<string> rel { get; set; }
    }

    public class WordThesaurus
    {
        public Adjective adjective { get; set; }
        public Noun noun { get; set; }
        public Verb verb { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                string key = ConfigurationManager.AppSettings["apikey"] as string;
                if (string.IsNullOrWhiteSpace(key))
                {
                    Console.WriteLine("Thesaurus: configuration error - missing api key.");
                }
                else if (args.Length != 1)
                {
                    Console.WriteLine("Usage: thesaurus <word>");
                }
                else
                {
                    APICall(args[0], key).Wait();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error checking thesaurus.");
            }
        }

        static async Task APICall(string word, string key)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri($"http://words.bighugelabs.com/");
                HttpResponseMessage response = await client.GetAsync($"api/2/{key}/{word}/json");
                if (response.IsSuccessStatusCode)
                {
                    string json = await response.Content.ReadAsStringAsync();
                    WordThesaurus wordThesaurus = JsonConvert.DeserializeObject<WordThesaurus>(json);
                    if (wordThesaurus.adjective != null)
                    {
                        Console.WriteLine("Adjective:");
                        if (wordThesaurus.adjective.syn != null)
                        {
                            foreach (string syn in wordThesaurus.adjective.syn)
                            {
                                Console.WriteLine("\tSynonym: " + syn);
                            }
                        }
                        if (wordThesaurus.adjective.ant != null)
                        {
                            foreach (string ant in wordThesaurus.adjective.ant)
                            {
                                Console.WriteLine("\tAntonym: " + ant);
                            }
                        }
                        if (wordThesaurus.adjective.rel != null)
                        {
                            foreach (string rel in wordThesaurus.adjective.rel)
                            {
                                Console.WriteLine("\tRelated: " + rel);
                            }
                        }
                    }
                    if (wordThesaurus.noun != null)
                    {
                        Console.WriteLine("Noun:");
                        if (wordThesaurus.noun.syn != null)
                        {
                            foreach (string syn in wordThesaurus.noun.syn)
                            {
                                Console.WriteLine("\tSynonym: " + syn);
                            }
                        }
                        if (wordThesaurus.noun.ant != null)
                        {
                            foreach (string ant in wordThesaurus.noun.ant)
                            {
                                Console.WriteLine("\tAntonym: " + ant);
                            }
                        }
                        if (wordThesaurus.noun.ant != null)
                        {
                            foreach (string rel in wordThesaurus.noun.rel)
                            {
                                Console.WriteLine("\tRelated: " + rel);
                            }
                        }
                    }
                    if (wordThesaurus.verb != null)
                    {
                        Console.WriteLine("Verb:");
                        if (wordThesaurus.verb.syn != null)
                        {
                            foreach (string syn in wordThesaurus.verb.syn)
                            {
                                Console.WriteLine("\tSynonym: " + syn);
                            }
                        }
                        if (wordThesaurus.verb.ant != null)
                        {
                            foreach (string ant in wordThesaurus.verb.ant)
                            {
                                Console.WriteLine("\tAntonym: " + ant);
                            }
                        }
                        if (wordThesaurus.verb.ant != null)
                        {
                            foreach (string rel in wordThesaurus.verb.rel)
                            {
                                Console.WriteLine("\tRelated: " + rel);
                            }
                        }
                    }
                }
                else
                {
                    throw new Exception("Internal server Error");
                }
            }
        }
    }
}
